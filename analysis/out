stub List ../../../stubList.json
pathToRoot ../tests
StubList [{"stubLocation":"(/home/ashish/work/NEU/jalangi2/project/dynamic/tests/test-loading-semantics.js:1:1:37:1)"},{"stubLocation":"(/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second.js:15:1:19:2)"},{"stubLocation":"(/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second.js:1:1:47:1)"},{"stubLocation":"(/home/ashish/work/NEU/jalangi2/project/dynamic/tests/line.js:33:22:37:2)"},{"stubLocation":"(/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second.js:33:20:37:2)"}]
{ '0': 
   { fileName: '/home/ashish/work/NEU/jalangi2/project/dynamic/tests/test-loading-semantics',
     funcLoc: '1:1:37:1' },
  '1': 
   { fileName: '/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second',
     funcLoc: '15:1:19:2' },
  '2': 
   { fileName: '/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second',
     funcLoc: '1:1:47:1' },
  '3': 
   { fileName: '/home/ashish/work/NEU/jalangi2/project/dynamic/tests/line',
     funcLoc: '33:22:37:2' },
  '4': 
   { fileName: '/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second',
     funcLoc: '33:20:37:2' } }
0
1
finding the function at 15:1:19:2 at line 15 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
Node 
Function unused_function
{ start: { line: 15, column: 0 }, end: { line: 19, column: 1 } }
function start 15
Returned function name unused_function
Function Name unused_function
Transforming the AST for the function unused_function
Creating stub for declaration
function lazyLoad(funName) {
    var code = fs.readFileSync(srcFile);
    var ast = esprima.parse(code);
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = node.body;
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (startLineNumber == node.loc.start.line) {
                        if (right.type == 'FunctionExpression') {
                            if (left.type == 'MemberExpression') {
                                console.log('The expression Statement');
                                var leftVarBaseName = left.object.name;
                                var leftVarExtName = left.property.name;
                                var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                                var functionName = leftVarPath;
                                var functionBody = right.body;
                                cachedCode[srcFile][functionName] = functionBody;
                            }
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
################################## MODIFIED ##########################
Final Program  
var cachedCode = {};
const line = require('./line.js');
var exports = module.exports = {};
const math = Math;
var unused_diameter = 2;
exports.area = function (radius) {
    return math.PI * radius * radius;
};
{
    var original_unused_function;
    function _unused_function(_param) {
        var _var1;
                if (original_unused_function == null) {
            lazyLoad(unused_function);
            undefined;
        }
    }
        original_unused_function.apply(this, _param);
}
exports.perimeter = function (radius) {
    return 2 * math.PI * radius;
};
exports.drawCircle = function (radius) {
    if (this.isNontrivial(radius)) {
        l = line.drawLine(exports.perimeter(radius));
        line.trim();
    }
};
exports.diameter = function (radius) {
    var unused_dimeter = 2;
    return 2 * unused_dimeter;
};
exports.isNontrivial = function (radius) {
    if (radius >= 0)
        return true;
    else
        return false;
};
function lazyLoad(funName) {
    var code = fs.readFileSync(srcFile);
    var ast = esprima.parse(code);
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = node.body;
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (startLineNumber == node.loc.start.line) {
                        if (right.type == 'FunctionExpression') {
                            if (left.type == 'MemberExpression') {
                                console.log('The expression Statement');
                                var leftVarBaseName = left.object.name;
                                var leftVarExtName = left.property.name;
                                var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                                var functionName = leftVarPath;
                                var functionBody = right.body;
                                cachedCode[srcFile][functionName] = functionBody;
                            }
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-exported_circle_second
___________________________________________________________
2
3
finding the function at 33:22:37:2 at line 33 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/line
/home/ashish/work/NEU/jalangi2/project/dynamic/tests/line
The expression Statement
ExpressionStatement {
  type: 'ExpressionStatement',
  expression: 
   AssignmentExpression {
     type: 'AssignmentExpression',
     operator: '=',
     left: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      FunctionExpression {
        type: 'FunctionExpression',
        id: null,
        params: [],
        body: [Object],
        generator: false,
        expression: false,
        async: false,
        range: [Object],
        loc: [Object] },
     range: [ 384, 421 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 384, 422 ],
  loc: { start: { line: 33, column: 0 }, end: { line: 37, column: 2 } } }
Returned function name exports.extraCheks
Function Name exports.extraCheks
Transforming the AST for the function exports.extraCheks
Replacing [object Object] with exports.extraCheks
function lazyLoad(funName) {
    var code = fs.readFileSync(srcFile);
    var ast = esprima.parse(code);
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = node.body;
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (startLineNumber == node.loc.start.line) {
                        if (right.type == 'FunctionExpression') {
                            if (left.type == 'MemberExpression') {
                                console.log('The expression Statement');
                                var leftVarBaseName = left.object.name;
                                var leftVarExtName = left.property.name;
                                var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                                var functionName = leftVarPath;
                                var functionBody = right.body;
                                cachedCode[srcFile][functionName] = functionBody;
                            }
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
################################## MODIFIED ##########################
Final Program  
var cachedCode = {};
var exports = module.exports = {};
var exports = module.exports = {};
exports.line = { line_size: 0 };
exports.drawLine = function (size) {
    if (size > 0) {
        for (i = 0; i < size; i += 1) {
            process.stdout.write('-');
        }
        return size;
    } else {
        return size;
    }
};
exports.trim = function () {
    if (this.line.size > 0) {
        this.lize.size = this.line.size - 1;
    }
};
exports.extraCheks = function () {
    var _var1;
        if (original_exports.extraCheks == null) {
        lazyLoad(exports.extraCheks);
        original_exports.extraCheks = this.eval(cachedCode[exports.extraCheks]);
        exports.extraCheks = original_exports.extraCheks;
    }
        original_exports.extraCheks.apply(this);
};
function lazyLoad(funName) {
    var code = fs.readFileSync(srcFile);
    var ast = esprima.parse(code);
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = node.body;
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (startLineNumber == node.loc.start.line) {
                        if (right.type == 'FunctionExpression') {
                            if (left.type == 'MemberExpression') {
                                console.log('The expression Statement');
                                var leftVarBaseName = left.object.name;
                                var leftVarExtName = left.property.name;
                                var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                                var functionName = leftVarPath;
                                var functionBody = right.body;
                                cachedCode[srcFile][functionName] = functionBody;
                            }
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-line
___________________________________________________________
4
finding the function at 33:20:37:2 at line 33 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
/home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
Node 
Function unused_function
{ start: { line: 15, column: 0 }, end: { line: 19, column: 1 } }
function start 15
The expression Statement
ExpressionStatement {
  type: 'ExpressionStatement',
  expression: 
   AssignmentExpression {
     type: 'AssignmentExpression',
     operator: '=',
     left: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      FunctionExpression {
        type: 'FunctionExpression',
        id: null,
        params: [Object],
        body: [Object],
        generator: false,
        expression: false,
        async: false,
        range: [Object],
        loc: [Object] },
     range: [ 599, 694 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 599, 695 ],
  loc: { start: { line: 33, column: 0 }, end: { line: 37, column: 2 } } }
Returned function name exports.diameter
Function Name exports.diameter
Transforming the AST for the function exports.diameter
Replacing [object Object] with exports.diameter
Identifier {
  type: 'Identifier',
  name: 'radius',
  range: [ 628, 634 ],
  loc: 
   { start: { line: 33, column: 29 },
     end: { line: 33, column: 35 } } }
function lazyLoad(funName) {
    var code = fs.readFileSync(srcFile);
    var ast = esprima.parse(code);
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = node.body;
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (startLineNumber == node.loc.start.line) {
                        if (right.type == 'FunctionExpression') {
                            if (left.type == 'MemberExpression') {
                                console.log('The expression Statement');
                                var leftVarBaseName = left.object.name;
                                var leftVarExtName = left.property.name;
                                var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                                var functionName = leftVarPath;
                                var functionBody = right.body;
                                cachedCode[srcFile][functionName] = functionBody;
                            }
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
################################## MODIFIED ##########################
Final Program  
var cachedCode = {};
const line = require('./line.js');
var exports = module.exports = {};
const math = Math;
var unused_diameter = 2;
exports.area = function (radius) {
    return math.PI * radius * radius;
};
function unused_function() {
    console.log('Unused Function');
}
exports.perimeter = function (radius) {
    return 2 * math.PI * radius;
};
exports.drawCircle = function (radius) {
    if (this.isNontrivial(radius)) {
        l = line.drawLine(exports.perimeter(radius));
        line.trim();
    }
};
exports.diameter = function (radius) {
    var _var1;
        if (original_exports.diameter == null) {
        lazyLoad(exports.diameter);
        original_exports.diameter = this.eval(cachedCode[exports.diameter]);
        exports.diameter = original_exports.diameter;
    }
        original_exports.diameter.apply(this, radius);
};
exports.isNontrivial = function (radius) {
    if (radius >= 0)
        return true;
    else
        return false;
};
function lazyLoad(funName) {
    var code = fs.readFileSync(srcFile);
    var ast = esprima.parse(code);
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = node.body;
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (startLineNumber == node.loc.start.line) {
                        if (right.type == 'FunctionExpression') {
                            if (left.type == 'MemberExpression') {
                                console.log('The expression Statement');
                                var leftVarBaseName = left.object.name;
                                var leftVarExtName = left.property.name;
                                var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                                var functionName = leftVarPath;
                                var functionBody = right.body;
                                cachedCode[srcFile][functionName] = functionBody;
                            }
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-exported_circle_second
___________________________________________________________
