finding the function at 1:1:37:1 at line 1 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/test-loading-semantics
Node 
Function makeACircle
{ start: { line: 18, column: 0 }, end: { line: 26, column: 1 } }
function start 18
Returned function name null
No function found for the input file and location
SRC /home/ashish/work/NEU/jalangi2/project/dynamic/tests/test-loading-semantics
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
TypeError: Cannot read property 'toString' of undefined
    at Object.exports.addOriginalDeclaration (/home/ashish/work/NEU/jalangi2/project/dynamic/analysis/Transformer.js:412:18)
    at transformUncovered (/home/ashish/work/NEU/jalangi2/project/dynamic/analysis/S2STransformer.js:106:30)
    at /home/ashish/work/NEU/jalangi2/project/dynamic/analysis/S2STransformer.js:64:5
    at Object.<anonymous> (/home/ashish/work/NEU/jalangi2/project/dynamic/analysis/S2STransformer.js:266:2)
    at Module._compile (module.js:410:26)
    at Object.Module._extensions..js (module.js:417:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Function.Module.runMain (module.js:442:10)
    at startup (node.js:136:18)
finding the function at 15:1:19:2 at line 15 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
Node 
Function unused_function
{ start: { line: 15, column: 0 }, end: { line: 19, column: 1 } }
function start 15
Returned function name unused_function
SRC /home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Transforming the AST for the function unused_function
Creating stub for declaration
################################## MODIFIED AST for the function ##########################
Modified Program  
var srcFile = null / work / NEU / jalangi2 / project / dynamic / tests / exported_circle_second;
var fs = require('fs');
var esprima = require('esprima');
var estraverse = require('estraverse');
var cutility = require('./cutility.js');
var escodegen = require('escodegen');
var cachedCode = {};
const line = require('./line.js');
var exports = module.exports = {};
const math = Math;
var unused_diameter = 2;
exports.area = function (radius) {
    return math.PI * radius * radius;
};
{
    var original_unused_function;
    function _unused_function(_param) {
        var _var1;
                if (original_unused_function == null) {
            lazyLoad(unused_function);
            undefined;
        }
    }
        original_unused_function.apply(this, _param);
}
exports.perimeter = function (radius) {
    return 2 * math.PI * radius;
};
exports.drawCircle = function (radius) {
    if (this.isNontrivial(radius)) {
        l = line.drawLine(exports.perimeter(radius));
        line.trim();
    }
};
exports.diameter = function (radius) {
    var unused_dimeter = 2;
    return 2 * unused_dimeter;
};
exports.isNontrivial = function (radius) {
    if (radius >= 0)
        return true;
    else
        return false;
};
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
var original_unused_function = null;
function extractBodies(srcFile) {
    var code = fs.readFileSync(srcFile, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                console.log('Function Node :: Declaration');
                var functionName = node.id.name;
                var functionBody = escodegen.generate(node);
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                console.log('Function Node :: Expression');
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    console.log('left  \t ');
                    console.log('right \t');
                    if (right.type == 'FunctionExpression') {
                        if (left.type == 'MemberExpression') {
                            var leftVarBaseName = left.object.name;
                            var leftVarExtName = left.property.name;
                            var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                            var functionName = leftVarPath;
                            var functionBody = escodegen.generate(right);
                            cachedCode[srcFile][functionName] = functionBody;
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
var original_unused_function = null;
var original_unused_function = null;
finding the function at 1:1:47:1 at line 1 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
Node 
Function unused_function
{ start: { line: 15, column: 0 }, end: { line: 19, column: 1 } }
function start 15
Returned function name null
No function found for the input file and location
TypeError: Cannot read property 'toString' of undefined
    at Object.exports.addOriginalDeclaration (/home/ashish/work/NEU/jalangi2/project/dynamic/analysis/Transformer.js:412:18)
    at transformUncovered (/home/ashish/work/NEU/jalangi2/project/dynamic/analysis/S2STransformer.js:106:30)
    at /home/ashish/work/NEU/jalangi2/project/dynamic/analysis/S2STransformer.js:64:5
    at Object.<anonymous> (/home/ashish/work/NEU/jalangi2/project/dynamic/analysis/S2STransformer.js:266:2)
    at Module._compile (module.js:410:26)
    at Object.Module._extensions..js (module.js:417:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Function.Module.runMain (module.js:442:10)
    at startup (node.js:136:18)
finding the function at 33:22:37:2 at line 33 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/line
The expression Statement
ExpressionStatement {
  type: 'ExpressionStatement',
  expression: 
   AssignmentExpression {
     type: 'AssignmentExpression',
     operator: '=',
     left: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      FunctionExpression {
        type: 'FunctionExpression',
        id: null,
        params: [],
        body: [Object],
        generator: false,
        expression: false,
        async: false,
        range: [Object],
        loc: [Object] },
     range: [ 384, 421 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 384, 422 ],
  loc: { start: { line: 33, column: 0 }, end: { line: 37, column: 2 } } }
Returned function name exports.extraCheks
SRC /home/ashish/work/NEU/jalangi2/project/dynamic/tests/line
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Transforming the AST for the function exports.extraCheks
Replacing [object Object] with exports.extraCheks
################################## MODIFIED AST for the function ##########################
Modified Program  
var srcFile = null / work / NEU / jalangi2 / project / dynamic / tests / line;
var fs = require('fs');
var esprima = require('esprima');
var estraverse = require('estraverse');
var cutility = require('./cutility.js');
var escodegen = require('escodegen');
var cachedCode = {};
var exports = module.exports = {};
var exports = module.exports = {};
exports.line = { line_size: 0 };
exports.drawLine = function (size) {
    if (size > 0) {
        for (i = 0; i < size; i += 1) {
            process.stdout.write('-');
        }
        return size;
    } else {
        return size;
    }
};
exports.trim = function () {
    if (this.line.size > 0) {
        this.lize.size = this.line.size - 1;
    }
};
exports.extraCheks = function () {
    var _var1;
        if (original_exports.extraCheks == null) {
        lazyLoad(exports.extraCheks);
        original_exports.extraCheks = this.eval(cachedCode[exports.extraCheks]);
        exports.extraCheks = original_exports.extraCheks;
    }
        original_exports.extraCheks.apply(this);
};
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
var original_exports_extraCheks = null;
function extractBodies(srcFile) {
    var code = fs.readFileSync(srcFile, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                console.log('Function Node :: Declaration');
                var functionName = node.id.name;
                var functionBody = escodegen.generate(node);
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                console.log('Function Node :: Expression');
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    console.log('left  \t ');
                    console.log('right \t');
                    if (right.type == 'FunctionExpression') {
                        if (left.type == 'MemberExpression') {
                            var leftVarBaseName = left.object.name;
                            var leftVarExtName = left.property.name;
                            var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                            var functionName = leftVarPath;
                            var functionBody = escodegen.generate(right);
                            cachedCode[srcFile][functionName] = functionBody;
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
var original_exports_extraCheks = null;
finding the function at 33:20:37:2 at line 33 in file /home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
Node 
Function unused_function
{ start: { line: 15, column: 0 }, end: { line: 19, column: 1 } }
function start 15
The expression Statement
ExpressionStatement {
  type: 'ExpressionStatement',
  expression: 
   AssignmentExpression {
     type: 'AssignmentExpression',
     operator: '=',
     left: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      FunctionExpression {
        type: 'FunctionExpression',
        id: null,
        params: [Object],
        body: [Object],
        generator: false,
        expression: false,
        async: false,
        range: [Object],
        loc: [Object] },
     range: [ 599, 694 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 599, 695 ],
  loc: { start: { line: 33, column: 0 }, end: { line: 37, column: 2 } } }
Returned function name exports.diameter
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Transforming the AST for the function exports.diameter
Replacing [object Object] with exports.diameter
Identifier {
  type: 'Identifier',
  name: 'radius',
  range: [ 628, 634 ],
  loc: 
   { start: { line: 33, column: 29 },
     end: { line: 33, column: 35 } } }
################################## MODIFIED AST for the function ##########################
Modified Program  
var srcFile = null / work / NEU / jalangi2 / project / dynamic / tests / exported_circle_second;
var fs = require('fs');
var esprima = require('esprima');
var estraverse = require('estraverse');
var cutility = require('./cutility.js');
var escodegen = require('escodegen');
var cachedCode = {};
const line = require('./line.js');
var exports = module.exports = {};
const math = Math;
var unused_diameter = 2;
exports.area = function (radius) {
    return math.PI * radius * radius;
};
{
    var original_unused_function;
    function _unused_function(_param) {
        var _var1;
                if (original_unused_function == null) {
            lazyLoad(unused_function);
            undefined;
        }
    }
        original_unused_function.apply(this, _param);
        var original_exports_diameter = null;
}
exports.perimeter = function (radius) {
    return 2 * math.PI * radius;
};
exports.drawCircle = function (radius) {
    if (this.isNontrivial(radius)) {
        l = line.drawLine(exports.perimeter(radius));
        line.trim();
    }
};
exports.diameter = function (radius) {
    var _var1;
        if (original_exports.diameter == null) {
        lazyLoad(exports.diameter);
        original_exports.diameter = this.eval(cachedCode[exports.diameter]);
        exports.diameter = original_exports.diameter;
    }
        original_exports.diameter.apply(this, radius);
};
exports.isNontrivial = function (radius) {
    if (radius >= 0)
        return true;
    else
        return false;
};
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
var original_unused_function = null;
var original_exports_diameter = null;
function extractBodies(srcFile) {
    var code = fs.readFileSync(srcFile, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                console.log('Function Node :: Declaration');
                var functionName = node.id.name;
                var functionBody = escodegen.generate(node);
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                console.log('Function Node :: Expression');
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    console.log('left  \t ');
                    console.log('right \t');
                    if (right.type == 'FunctionExpression') {
                        if (left.type == 'MemberExpression') {
                            var leftVarBaseName = left.object.name;
                            var leftVarExtName = left.property.name;
                            var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                            var functionName = leftVarPath;
                            var functionBody = escodegen.generate(right);
                            cachedCode[srcFile][functionName] = functionBody;
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
var original_unused_function = null;
var original_exports_diameter = null;
var original_unused_function = null;
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-exported_circle_second
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-exported_circle_second
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-exported_circle_second
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-exported_circle_second
fileName-to-be-written /hom-ashis-wor-NE-jalangi-projec-dynami-test-exported_circle_second
