Returned function name unused_function
SRC /home/ashish/work/NEU/jalangi2/project/dynamic/tests/exported_circle_second
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
{ 'exported_circle_second.js': 'exported_circle_second_modified.js',
  'line.js': 'line_modified.js' }
Updating require declarations
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'srcFile',
     range: [ 5, 12 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   BinaryExpression {
     type: 'BinaryExpression',
     operator: '/',
     left: 
      BinaryExpression {
        type: 'BinaryExpression',
        operator: '/',
        left: [Object],
        right: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      Identifier {
        type: 'Identifier',
        name: 'exported_circle_second',
        range: [Object],
        loc: [Object] },
     range: [ 15, 90 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 5, 90 ],
  loc: { start: { line: 1, column: 5 }, end: { line: 1, column: 90 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'fs',
     range: [ 4, 6 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 9, 22 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 4, 22 ],
  loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 22 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'fs',
     range: [ 4, 6 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 9, 22 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 4, 22 ],
  loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 22 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'esprima',
     range: [ 28, 35 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 38, 56 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 28, 56 ],
  loc: { start: { line: 2, column: 4 }, end: { line: 2, column: 32 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'esprima',
     range: [ 28, 35 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 38, 56 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 28, 56 ],
  loc: { start: { line: 2, column: 4 }, end: { line: 2, column: 32 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'estraverse',
     range: [ 62, 72 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 75, 96 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 62, 96 ],
  loc: { start: { line: 3, column: 4 }, end: { line: 3, column: 38 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'estraverse',
     range: [ 62, 72 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 75, 96 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 62, 96 ],
  loc: { start: { line: 3, column: 4 }, end: { line: 3, column: 38 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'cutility',
     range: [ 102, 110 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 113, 137 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 102, 137 ],
  loc: { start: { line: 4, column: 4 }, end: { line: 4, column: 39 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'cutility',
     range: [ 102, 110 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 113, 137 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 102, 137 ],
  loc: { start: { line: 4, column: 4 }, end: { line: 4, column: 39 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'escodegen',
     range: [ 143, 152 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 155, 175 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 143, 175 ],
  loc: { start: { line: 5, column: 4 }, end: { line: 5, column: 36 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'escodegen',
     range: [ 143, 152 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 155, 175 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 143, 175 ],
  loc: { start: { line: 5, column: 4 }, end: { line: 5, column: 36 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'cachedCode',
     range: [ 4, 14 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   ObjectExpression {
     type: 'ObjectExpression',
     properties: [],
     range: [ 17, 19 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 4, 19 ],
  loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 19 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'line',
     range: [ 128, 132 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 135, 155 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 128, 155 ],
  loc: { start: { line: 3, column: 6 }, end: { line: 3, column: 33 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'line',
     range: [ 128, 132 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 135, 155 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 128, 155 ],
  loc: { start: { line: 3, column: 6 }, end: { line: 3, column: 33 } } }
l line.js
new literal line_modified.js
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'exports',
     range: [ 162, 169 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   AssignmentExpression {
     type: 'AssignmentExpression',
     operator: '=',
     left: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      ObjectExpression {
        type: 'ObjectExpression',
        properties: [],
        range: [Object],
        loc: [Object] },
     range: [ 172, 191 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 162, 191 ],
  loc: { start: { line: 5, column: 4 }, end: { line: 5, column: 33 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'math',
     range: [ 201, 205 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   Identifier {
     type: 'Identifier',
     name: 'Math',
     range: [ 208, 212 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 201, 212 ],
  loc: { start: { line: 8, column: 6 }, end: { line: 8, column: 17 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'unused_diameter',
     range: [ 218, 233 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   Literal {
     type: 'Literal',
     value: 2,
     raw: '2',
     range: [ 236, 237 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 218, 237 ],
  loc: { start: { line: 9, column: 4 }, end: { line: 9, column: 23 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'unused_dimeter',
     range: [ 643, 657 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   Literal {
     type: 'Literal',
     value: 2,
     raw: '2',
     range: [ 660, 661 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 643, 661 ],
  loc: 
   { start: { line: 34, column: 5 },
     end: { line: 34, column: 23 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'code',
     range: [ 47, 51 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 54, 87 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 47, 87 ],
  loc: { start: { line: 2, column: 8 }, end: { line: 2, column: 48 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'ast',
     range: [ 198, 201 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 204, 275 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 198, 275 ],
  loc: { start: { line: 5, column: 8 }, end: { line: 5, column: 85 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'code',
     range: [ 42, 46 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 49, 81 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 42, 81 ],
  loc: { start: { line: 2, column: 8 }, end: { line: 2, column: 47 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'ast',
     range: [ 192, 195 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 198, 269 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 192, 269 ],
  loc: { start: { line: 5, column: 8 }, end: { line: 5, column: 85 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionName',
     range: [ 447, 459 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'name',
        range: [Object],
        loc: [Object] },
     range: [ 462, 474 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 447, 474 ],
  loc: 
   { start: { line: 10, column: 20 },
     end: { line: 10, column: 47 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionBody',
     range: [ 496, 508 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 511, 535 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 496, 535 ],
  loc: 
   { start: { line: 11, column: 20 },
     end: { line: 11, column: 59 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'left',
     range: [ 758, 762 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'left',
        range: [Object],
        loc: [Object] },
     range: [ 765, 785 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 758, 785 ],
  loc: 
   { start: { line: 15, column: 24 },
     end: { line: 15, column: 51 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'right',
     range: [ 811, 816 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'right',
        range: [Object],
        loc: [Object] },
     range: [ 819, 840 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 811, 840 ],
  loc: 
   { start: { line: 16, column: 24 },
     end: { line: 16, column: 53 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarBaseName',
     range: [ 999, 1014 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'name',
        range: [Object],
        loc: [Object] },
     range: [ 1017, 1033 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 999, 1033 ],
  loc: 
   { start: { line: 19, column: 32 },
     end: { line: 19, column: 66 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarExtName',
     range: [ 1067, 1081 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'name',
        range: [Object],
        loc: [Object] },
     range: [ 1084, 1102 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1067, 1102 ],
  loc: 
   { start: { line: 20, column: 32 },
     end: { line: 20, column: 67 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarPath',
     range: [ 1136, 1147 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   BinaryExpression {
     type: 'BinaryExpression',
     operator: '+',
     left: 
      BinaryExpression {
        type: 'BinaryExpression',
        operator: '+',
        left: [Object],
        right: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      Identifier {
        type: 'Identifier',
        name: 'leftVarExtName',
        range: [Object],
        loc: [Object] },
     range: [ 1150, 1188 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1136, 1188 ],
  loc: 
   { start: { line: 21, column: 32 },
     end: { line: 21, column: 84 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionName',
     range: [ 1222, 1234 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarPath',
     range: [ 1237, 1248 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1222, 1248 ],
  loc: 
   { start: { line: 22, column: 32 },
     end: { line: 22, column: 58 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionBody',
     range: [ 1282, 1294 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 1297, 1322 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1282, 1322 ],
  loc: 
   { start: { line: 23, column: 32 },
     end: { line: 23, column: 72 } } }
New Modified AST
var srcFile = null / work / NEU / jalangi2 / project / dynamic / tests / exported_circle_second;
var fs = require('fs');
var esprima = require('esprima');
var estraverse = require('estraverse');
var cutility = require('./cutility.js');
var escodegen = require('escodegen');
var cachedCode = {};
const line = require('./line_modified.js');
var exports = module.exports = {};
const math = Math;
var unused_diameter = 2;
exports.area = function (radius) {
    return math.PI * radius * radius;
};
function unused_function() {
    console.log('Unused Function');
}
exports.perimeter = function (radius) {
    return 2 * math.PI * radius;
};
exports.drawCircle = function (radius) {
    if (this.isNontrivial(radius)) {
        l = line.drawLine(exports.perimeter(radius));
        line.trim();
    }
};
exports.diameter = function (radius) {
    var unused_dimeter = 2;
    return 2 * unused_dimeter;
};
exports.isNontrivial = function (radius) {
    if (radius >= 0)
        return true;
    else
        return false;
};
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
function extractBodies(srcFile) {
    var code = fs.readFileSync(srcFile, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = escodegen.generate(node);
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (right.type == 'FunctionExpression') {
                        if (left.type == 'MemberExpression') {
                            var leftVarBaseName = left.object.name;
                            var leftVarExtName = left.property.name;
                            var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                            var functionName = leftVarPath;
                            var functionBody = escodegen.generate(right);
                            cachedCode[srcFile][functionName] = functionBody;
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
Transforming the AST for the function unused_function
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
Creating stub for declaration
Returned function name exports.extraCheks
SRC /home/ashish/work/NEU/jalangi2/project/dynamic/tests/line
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
{ 'exported_circle_second.js': 'exported_circle_second_modified.js',
  'line.js': 'line_modified.js' }
Updating require declarations
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'srcFile',
     range: [ 5, 12 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   BinaryExpression {
     type: 'BinaryExpression',
     operator: '/',
     left: 
      BinaryExpression {
        type: 'BinaryExpression',
        operator: '/',
        left: [Object],
        right: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      Identifier {
        type: 'Identifier',
        name: 'line',
        range: [Object],
        loc: [Object] },
     range: [ 15, 72 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 5, 72 ],
  loc: { start: { line: 1, column: 5 }, end: { line: 1, column: 72 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'fs',
     range: [ 4, 6 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 9, 22 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 4, 22 ],
  loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 22 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'fs',
     range: [ 4, 6 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 9, 22 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 4, 22 ],
  loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 22 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'esprima',
     range: [ 28, 35 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 38, 56 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 28, 56 ],
  loc: { start: { line: 2, column: 4 }, end: { line: 2, column: 32 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'esprima',
     range: [ 28, 35 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 38, 56 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 28, 56 ],
  loc: { start: { line: 2, column: 4 }, end: { line: 2, column: 32 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'estraverse',
     range: [ 62, 72 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 75, 96 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 62, 96 ],
  loc: { start: { line: 3, column: 4 }, end: { line: 3, column: 38 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'estraverse',
     range: [ 62, 72 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 75, 96 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 62, 96 ],
  loc: { start: { line: 3, column: 4 }, end: { line: 3, column: 38 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'cutility',
     range: [ 102, 110 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 113, 137 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 102, 137 ],
  loc: { start: { line: 4, column: 4 }, end: { line: 4, column: 39 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'cutility',
     range: [ 102, 110 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 113, 137 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 102, 137 ],
  loc: { start: { line: 4, column: 4 }, end: { line: 4, column: 39 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'escodegen',
     range: [ 143, 152 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 155, 175 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 143, 175 ],
  loc: { start: { line: 5, column: 4 }, end: { line: 5, column: 36 } } }
Variable Declaration 
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'escodegen',
     range: [ 143, 152 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      Identifier {
        type: 'Identifier',
        name: 'require',
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 155, 175 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 143, 175 ],
  loc: { start: { line: 5, column: 4 }, end: { line: 5, column: 36 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'cachedCode',
     range: [ 4, 14 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   ObjectExpression {
     type: 'ObjectExpression',
     properties: [],
     range: [ 17, 19 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 4, 19 ],
  loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 19 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'exports',
     range: [ 4, 11 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   AssignmentExpression {
     type: 'AssignmentExpression',
     operator: '=',
     left: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      ObjectExpression {
        type: 'ObjectExpression',
        properties: [],
        range: [Object],
        loc: [Object] },
     range: [ 14, 33 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 4, 33 ],
  loc: { start: { line: 1, column: 4 }, end: { line: 1, column: 33 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'exports',
     range: [ 40, 47 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   AssignmentExpression {
     type: 'AssignmentExpression',
     operator: '=',
     left: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      ObjectExpression {
        type: 'ObjectExpression',
        properties: [],
        range: [Object],
        loc: [Object] },
     range: [ 50, 68 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 40, 68 ],
  loc: { start: { line: 3, column: 4 }, end: { line: 3, column: 32 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'code',
     range: [ 47, 51 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 54, 87 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 47, 87 ],
  loc: { start: { line: 2, column: 8 }, end: { line: 2, column: 48 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'ast',
     range: [ 198, 201 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 204, 275 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 198, 275 ],
  loc: { start: { line: 5, column: 8 }, end: { line: 5, column: 85 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'code',
     range: [ 42, 46 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 49, 81 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 42, 81 ],
  loc: { start: { line: 2, column: 8 }, end: { line: 2, column: 47 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'ast',
     range: [ 192, 195 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object], [Object] ],
     range: [ 198, 269 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 192, 269 ],
  loc: { start: { line: 5, column: 8 }, end: { line: 5, column: 85 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionName',
     range: [ 447, 459 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'name',
        range: [Object],
        loc: [Object] },
     range: [ 462, 474 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 447, 474 ],
  loc: 
   { start: { line: 10, column: 20 },
     end: { line: 10, column: 47 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionBody',
     range: [ 496, 508 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 511, 535 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 496, 535 ],
  loc: 
   { start: { line: 11, column: 20 },
     end: { line: 11, column: 59 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'left',
     range: [ 758, 762 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'left',
        range: [Object],
        loc: [Object] },
     range: [ 765, 785 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 758, 785 ],
  loc: 
   { start: { line: 15, column: 24 },
     end: { line: 15, column: 51 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'right',
     range: [ 811, 816 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'right',
        range: [Object],
        loc: [Object] },
     range: [ 819, 840 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 811, 840 ],
  loc: 
   { start: { line: 16, column: 24 },
     end: { line: 16, column: 53 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarBaseName',
     range: [ 999, 1014 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'name',
        range: [Object],
        loc: [Object] },
     range: [ 1017, 1033 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 999, 1033 ],
  loc: 
   { start: { line: 19, column: 32 },
     end: { line: 19, column: 66 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarExtName',
     range: [ 1067, 1081 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   StaticMemberExpression {
     type: 'MemberExpression',
     computed: false,
     object: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     property: 
      Identifier {
        type: 'Identifier',
        name: 'name',
        range: [Object],
        loc: [Object] },
     range: [ 1084, 1102 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1067, 1102 ],
  loc: 
   { start: { line: 20, column: 32 },
     end: { line: 20, column: 67 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarPath',
     range: [ 1136, 1147 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   BinaryExpression {
     type: 'BinaryExpression',
     operator: '+',
     left: 
      BinaryExpression {
        type: 'BinaryExpression',
        operator: '+',
        left: [Object],
        right: [Object],
        range: [Object],
        loc: [Object] },
     right: 
      Identifier {
        type: 'Identifier',
        name: 'leftVarExtName',
        range: [Object],
        loc: [Object] },
     range: [ 1150, 1188 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1136, 1188 ],
  loc: 
   { start: { line: 21, column: 32 },
     end: { line: 21, column: 84 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionName',
     range: [ 1222, 1234 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   Identifier {
     type: 'Identifier',
     name: 'leftVarPath',
     range: [ 1237, 1248 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1222, 1248 ],
  loc: 
   { start: { line: 22, column: 32 },
     end: { line: 22, column: 58 } } }
NODE
VariableDeclarator {
  type: 'VariableDeclarator',
  id: 
   Identifier {
     type: 'Identifier',
     name: 'functionBody',
     range: [ 1282, 1294 ],
     loc: { start: [Object], end: [Object] } },
  init: 
   CallExpression {
     type: 'CallExpression',
     callee: 
      StaticMemberExpression {
        type: 'MemberExpression',
        computed: false,
        object: [Object],
        property: [Object],
        range: [Object],
        loc: [Object] },
     arguments: [ [Object] ],
     range: [ 1297, 1322 ],
     loc: { start: [Object], end: [Object] } },
  range: [ 1282, 1322 ],
  loc: 
   { start: { line: 23, column: 32 },
     end: { line: 23, column: 72 } } }
New Modified AST
var srcFile = null / work / NEU / jalangi2 / project / dynamic / tests / line;
var fs = require('fs');
var esprima = require('esprima');
var estraverse = require('estraverse');
var cutility = require('./cutility.js');
var escodegen = require('escodegen');
var cachedCode = {};
var exports = module.exports = {};
var exports = module.exports = {};
exports.line = { line_size: 0 };
exports.drawLine = function (size) {
    if (size > 0) {
        for (i = 0; i < size; i += 1) {
            process.stdout.write('-');
        }
        return size;
    } else {
        return size;
    }
};
exports.trim = function () {
    if (this.line.size > 0) {
        this.lize.size = this.line.size - 1;
    }
};
exports.extraCheks = function () {
};
function lazyLoad(funName, fileName) {
    var code = fs.readFileSync(fileName, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    cutility.extractBodies(fileName);
}
function extractBodies(srcFile) {
    var code = fs.readFileSync(srcFile, 'utf8');
    var ast = esprima.parse(code.toString(), {
        range: true,
        loc: true,
        tokens: false
    });
    cachedCode[srcFile] = {};
    estraverse.traverse(ast, {
        enter: function (node, parent) {
            if (node.type == 'FunctionDeclaration') {
                var functionName = node.id.name;
                var functionBody = escodegen.generate(node);
                cachedCode[srcFile][functionName] = functionBody;
            } else if (node.type == 'ExpressionStatement') {
                if (node.expression.type == 'AssignmentExpression') {
                    var left = node.expression.left;
                    var right = node.expression.right;
                    if (right.type == 'FunctionExpression') {
                        if (left.type == 'MemberExpression') {
                            var leftVarBaseName = left.object.name;
                            var leftVarExtName = left.property.name;
                            var leftVarPath = leftVarBaseName + '.' + leftVarExtName;
                            var functionName = leftVarPath;
                            var functionBody = escodegen.generate(right);
                            cachedCode[srcFile][functionName] = functionBody;
                        }
                    }
                } else {
                    estraverse.VisitorOption.skip;
                }
            } else {
                estraverse.VisitorOption.skip;
            }
        }
    });
}
Transforming the AST for the function exports.extraCheks
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
Replacing [object Object] with exports.extraCheks
Returned function name exports.diameter
Transforming the AST for the function exports.diameter
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
left  	 
right 	
Function Node :: Expression
Function Node :: Expression
Function Node :: Declaration
Function Node :: Expression
Replacing [object Object] with exports.diameter
Identifier {
  type: 'Identifier',
  name: 'radius',
  range: [ 628, 634 ],
  loc: 
   { start: { line: 33, column: 29 },
     end: { line: 33, column: 35 } } }
fileName-to-be-written exported_circle_second_modified.js
fileName-to-be-written line_modified.js
