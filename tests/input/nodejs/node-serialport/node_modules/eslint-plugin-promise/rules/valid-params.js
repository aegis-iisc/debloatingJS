'use strict';

var getDocsUrl = require('./lib/get-docs-url');
var isPromise = require('./lib/is-promise');

module.exports = {
  meta: {
    docs: {
      description: 'Ensures the proper number of arguments are passed to Promise functions',
      url: getDocsUrl('valid-params')
    }
  },
  create: function create(context) {
    return {
      CallExpression: function CallExpression(node) {
        if (!isPromise(node)) {
          return;
        }

        var name = node.callee.property.name;
        var numArgs = node.arguments.length;

        switch (name) {
          case 'resolve':
          case 'reject':
            if (numArgs > 1) {
              context.report({
                node: node,
                message: 'Promise.{{ name }}() requires 0 or 1 arguments, but received {{ numArgs }}',
                data: { name: name, numArgs: numArgs }
              });
            }
            break;
          case 'then':
            if (numArgs < 1 || numArgs > 2) {
              context.report({
                node: node,
                message: 'Promise.{{ name }}() requires 1 or 2 arguments, but received {{ numArgs }}',
                data: { name: name, numArgs: numArgs }
              });
            }
            break;
          case 'race':
          case 'all':
          case 'catch':
          case 'finally':
            if (numArgs !== 1) {
              context.report({
                node: node,
                message: 'Promise.{{ name }}() requires 1 argument, but received {{ numArgs }}',
                data: { name: name, numArgs: numArgs }
              });
            }
            break;
          default:
            break;
        }
      }
    };
  }
};