'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;

/**
 * A transform stream that emits data each time a byte sequence is received.
 * @extends Transform
 * @summary To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.
 * @example
const SerialPort = require('serialport')
const Delimiter = require('parser-delimiter')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Delimiter({ delimiter: '\n' }))
parser.on('data', console.log)
 */

var DelimiterParser = function (_Transform) {
  _inherits(DelimiterParser, _Transform);

  function DelimiterParser(options) {
    _classCallCheck(this, DelimiterParser);

    options = options || {};

    var _this = _possibleConstructorReturn(this, (DelimiterParser.__proto__ || Object.getPrototypeOf(DelimiterParser)).call(this, options));

    if (options.delimiter === undefined) {
      throw new TypeError('"delimiter" is not a bufferable object');
    }

    if (options.delimiter.length === 0) {
      throw new TypeError('"delimiter" has a 0 or undefined length');
    }

    _this.includeDelimiter = options.includeDelimiter !== undefined ? options.includeDelimiter : false;
    _this.delimiter = Buffer.from(options.delimiter);
    _this.buffer = Buffer.alloc(0);
    return _this;
  }

  _createClass(DelimiterParser, [{
    key: '_transform',
    value: function _transform(chunk, encoding, cb) {
      var data = Buffer.concat([this.buffer, chunk]);
      var position = void 0;
      while ((position = data.indexOf(this.delimiter)) !== -1) {
        this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));
        data = data.slice(position + this.delimiter.length);
      }
      this.buffer = data;
      cb();
    }
  }, {
    key: '_flush',
    value: function _flush(cb) {
      this.push(this.buffer);
      this.buffer = Buffer.alloc(0);
      cb();
    }
  }]);

  return DelimiterParser;
}(Transform);

module.exports = DelimiterParser;