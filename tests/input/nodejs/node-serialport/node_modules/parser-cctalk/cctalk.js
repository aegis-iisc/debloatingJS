'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Transform = require('stream').Transform;
var Buffer = require('safe-buffer').Buffer;

/**
 * Parse the CCTalk protocol
 * @extends Transform
 * @summary A transform stream that emits CCTalk packets as they are received.
 * @example
const SerialPort = require('serialport')
const CCTalk = require('parser-cctalk')
const port = new SerialPort('/dev/ttyUSB0')
const parser = port.pipe(new CCtalk())
parser.on('data', console.log)
 */

var CCTalkParser = function (_Transform) {
  _inherits(CCTalkParser, _Transform);

  function CCTalkParser() {
    _classCallCheck(this, CCTalkParser);

    var _this = _possibleConstructorReturn(this, (CCTalkParser.__proto__ || Object.getPrototypeOf(CCTalkParser)).call(this));

    _this.array = [];
    _this.cursor = 0;
    return _this;
  }

  _createClass(CCTalkParser, [{
    key: '_transform',
    value: function _transform(buffer, _, cb) {
      var _this2 = this;

      this.cursor += buffer.length;
      // TODO: Better Faster es7 no supported by node 4
      // ES7 allows directly push [...buffer]
      // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?
      Array.from(buffer).map(function (byte) {
        return _this2.array.push(byte);
      });
      while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {
        // full frame accumulated
        // copy command from the array
        var FullMsgLength = this.array[1] + 5;

        var frame = Buffer.from(this.array.slice(0, FullMsgLength));
        // Preserve Extra Data
        this.array = this.array.slice(frame.length, this.array.length);
        this.cursor -= FullMsgLength;
        this.push(frame);
      }
      cb();
    }
  }]);

  return CCTalkParser;
}(Transform);

module.exports = CCTalkParser;