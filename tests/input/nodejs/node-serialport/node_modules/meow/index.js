'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var path = require('path');
var buildMinimistOptions = require('minimist-options');
var minimist = require('minimist');
var camelcaseKeys = require('camelcase-keys');
var decamelizeKeys = require('decamelize-keys');
var trimNewlines = require('trim-newlines');
var redent = require('redent');
var readPkgUp = require('read-pkg-up');
var loudRejection = require('loud-rejection');
var normalizePackageData = require('normalize-package-data');

// Prevent caching of this module so module.parent is always accurate
delete require.cache[__filename];
var parentDir = path.dirname(module.parent.filename);

module.exports = function (helpMessage, opts) {
	loudRejection();

	if ((typeof helpMessage === 'undefined' ? 'undefined' : _typeof(helpMessage)) === 'object' && !Array.isArray(helpMessage)) {
		opts = helpMessage;
		helpMessage = '';
	}

	opts = Object.assign({
		pkg: readPkgUp.sync({
			cwd: parentDir,
			normalize: false
		}).pkg,
		argv: process.argv.slice(2),
		inferType: false,
		input: 'string',
		help: helpMessage,
		autoHelp: true,
		autoVersion: true
	}, opts);

	var minimistOpts = Object.assign({
		arguments: opts.input
	}, opts.flags);

	minimistOpts = decamelizeKeys(minimistOpts, '-', { exclude: ['stopEarly', '--'] });

	if (opts.inferType) {
		delete minimistOpts.arguments;
	}

	minimistOpts = buildMinimistOptions(minimistOpts);

	var pkg = opts.pkg;
	var argv = minimist(opts.argv, minimistOpts);
	var help = redent(trimNewlines((opts.help || '').replace(/\t+\n*$/, '')), 2);

	normalizePackageData(pkg);

	process.title = pkg.bin ? Object.keys(pkg.bin)[0] : pkg.name;

	var description = opts.description;
	if (!description && description !== false) {
		description = pkg.description;
	}

	help = (description ? '\n  ' + description + '\n' : '') + (help ? '\n' + help + '\n' : '\n');

	var showHelp = function showHelp(code) {
		console.log(help);
		process.exit(typeof code === 'number' ? code : 2);
	};

	var showVersion = function showVersion() {
		console.log(typeof opts.version === 'string' ? opts.version : pkg.version);
		process.exit();
	};

	if (argv.version && opts.autoVersion) {
		showVersion();
	}

	if (argv.help && opts.autoHelp) {
		showHelp(0);
	}

	var input = argv._;
	delete argv._;

	var flags = camelcaseKeys(argv, { exclude: ['--', /^\w$/] });

	return {
		input: input,
		flags: flags,
		pkg: pkg,
		help: help,
		showHelp: showHelp,
		showVersion: showVersion
	};
};