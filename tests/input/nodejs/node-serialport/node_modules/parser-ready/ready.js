'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;

/**
 * A transform stream that waits for a sequence of "ready" bytes before emitting a ready event and emitting data events
 * @summary To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.
 * @extends Transform
 * @example
const SerialPort = require('serialport')
const Ready = = require('parser-ready')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Ready({ delimiter: 'READY' }))
parser.on('ready', () => console.log('the ready byte sequence has been received'))
parser.on('data', console.log) // all data after READY is received
 */

var ReadyParser = function (_Transform) {
  _inherits(ReadyParser, _Transform);

  /**
   *
   * @param {object} options options for the parser
   * @param {string|Buffer|array} options.delimiter data to look for before emitted "ready"
   */
  function ReadyParser(options) {
    _classCallCheck(this, ReadyParser);

    options = options || {};
    if (options.delimiter === undefined) {
      throw new TypeError('"delimiter" is not a bufferable object');
    }

    if (options.delimiter.length === 0) {
      throw new TypeError('"delimiter" has a 0 or undefined length');
    }

    var _this = _possibleConstructorReturn(this, (ReadyParser.__proto__ || Object.getPrototypeOf(ReadyParser)).call(this, options));

    _this.delimiter = Buffer.from(options.delimiter);
    _this.readOffset = 0;
    _this.ready = false;
    return _this;
  }

  _createClass(ReadyParser, [{
    key: '_transform',
    value: function _transform(chunk, encoding, cb) {
      if (this.ready) {
        this.push(chunk);
        return cb();
      }
      var delimiter = this.delimiter;
      var chunkOffset = 0;
      while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {
        if (delimiter[this.readOffset] === chunk[chunkOffset]) {
          this.readOffset++;
        } else {
          this.readOffset = 0;
        }
        chunkOffset++;
      }
      if (this.readOffset === delimiter.length) {
        this.ready = true;
        this.emit('ready');
        var chunkRest = chunk.slice(chunkOffset);
        if (chunkRest.length > 0) {
          this.push(chunkRest);
        }
      }
      cb();
    }
  }]);

  return ReadyParser;
}(Transform);

module.exports = ReadyParser;