'use strict';

var _tapeCatch = require('tape-catch');

var _tapeCatch2 = _interopRequireDefault(_tapeCatch);

var _module = require('./module');

var _module2 = _interopRequireDefault(_module);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _tapeCatch2.default)('Detects shallow subsets.', function (is) {
  is.ok((0, _module2.default)({}, {}), 'with empty objects');

  is.ok((0, _module2.default)({ a: 1 }, {}), 'with an empty subset');

  is.ok((0, _module2.default)({ a: 1, b: 2 }, { a: 1, b: 2 }), 'with deep-equal objects');

  is.ok((0, _module2.default)({ a: 1, b: true, c: null, d: 'D', e: undefined, 'F-': 'anything' }, { a: 1, b: true, c: null, d: 'D', e: undefined, 'F-': 'anything' }), 'with deep-equal objects of different kinds of values');

  is.ok((0, _module2.default)({ a: 1, b: 2 }, { a: 1 }), 'with simple subsets');

  is.end();
});

(0, _tapeCatch2.default)('Detects shallow non-subsets.', function (is) {
  is.notOk((0, _module2.default)({}, { a: 1 }), 'with an empty superset');

  is.notOk((0, _module2.default)({ a: 1 }, { a: 2 }), 'with differences in values');

  is.notOk((0, _module2.default)({ a: 1 }, { b: 1 }), 'with differences in keys');

  is.notOk((0, _module2.default)({ a: 1 }, { a: 1, b: 2 }), 'with different sizes');

  is.notOk((0, _module2.default)({ a: 0 }, { a: false }), 'seeing the difference between falsey values');

  is.notOk((0, _module2.default)({ a: null }, { a: undefined }), 'seeing the difference between null and undefined');

  is.notOk((0, _module2.default)({ a: 1 }, { a: 1, b: undefined }), 'seeing the difference between undefined reference and undefined value');

  is.end();
});

(0, _tapeCatch2.default)('Detects deep subsets.', function (is) {
  is.ok((0, _module2.default)({ a: {} }, { a: {} }), 'with nested empty objects');

  is.ok((0, _module2.default)({ a: {} }, {}), 'with an empty subset');

  is.ok((0, _module2.default)({ a: { b: 2 } }, { a: {} }), 'with a nested empty subset');

  is.ok((0, _module2.default)({ a: { b: 2 } }, { a: { b: 2 } }), 'with deep-equal objects');

  is.ok((0, _module2.default)({ a: 1, b: true, c: null, d: 'D', e: undefined, 'F-': 'anything' }, { a: 1, b: true, c: null, d: 'D', e: undefined, 'F-': 'anything' }), 'with deep-equal objects of different kinds of values');

  is.ok((0, _module2.default)({ a: 1, b: { c: 3, d: 4 }, e: { f: { g: 7, h: { i: 9 } } } }, { a: 1, b: { d: 4 }, e: { f: { g: 7 } } }), 'with multiple levels of nesting');

  is.end();
});

(0, _tapeCatch2.default)('Detects deep non-subsets.', function (is) {
  is.notOk((0, _module2.default)({ a: {} }, { a: { b: 1 } }), 'with an empty object in the superset');

  is.notOk((0, _module2.default)({ a: { b: 2 } }, { a: { b: 3 } }), 'with differences in values in a nested object');

  is.notOk((0, _module2.default)({ z: { a: 1 } }, { z: { b: 1 } }), 'with differences in keys in a nested object');

  is.notOk((0, _module2.default)({ z: { a: 1 } }, { z: { a: 1, b: 2 } }), 'with different sizes of a nested object');

  is.end();
});

(0, _tapeCatch2.default)('Works with array values.', function (is) {
  is.ok((0, _module2.default)({ a: [] }, { a: [] }), 'treating empty arrays as equal');

  is.ok((0, _module2.default)({ a: [1] }, { a: [1] }), 'treating equal arrays as equal');

  is.notOk((0, _module2.default)({ a: [1] }, { a: [1, 2] }), 'detecting differences in length');

  is.notOk((0, _module2.default)({ a: [1] }, { a: [2] }), 'detecting differences in values');

  is.ok((0, _module2.default)({ a: [1, 2, 3] }, { a: [1, 2] }), 'treating array subsets as subsets');

  is.notOk((0, _module2.default)({ a: [1, 2, 3] }, { a: [1, 3] }), '– only if the order is identical');

  is.end();
});

(0, _tapeCatch2.default)('Returns false for non-object “objects”.', function (is) {
  is.notOk((0, _module2.default)('a', {}), 'for the superset');

  is.notOk((0, _module2.default)({}, 'a'), 'for the subset');

  is.end();
});