'use strict';

var path = require('path');
var findUp = require('find-up');
var loadJsonFile = require('load-json-file');

var filepaths = new WeakMap();
var filepath = function filepath(conf) {
	return filepaths.get(conf);
};
var findNextCwd = function findNextCwd(pkgPath) {
	return path.resolve(path.dirname(pkgPath), '..');
};

var addFp = function addFp(obj, fp) {
	filepaths.set(obj, fp);
	return obj;
};

var pkgConf = function pkgConf(namespace, opts) {
	if (!namespace) {
		return Promise.reject(new TypeError('Expected a namespace'));
	}

	opts = opts || {};

	return findUp('package.json', opts.cwd ? { cwd: opts.cwd } : {}).then(function (fp) {
		if (!fp) {
			return addFp(Object.assign({}, opts.defaults), fp);
		}

		return loadJsonFile(fp).then(function (pkg) {
			if (opts.skipOnFalse && pkg[namespace] === false) {
				var newOpts = Object.assign({}, opts, { cwd: findNextCwd(fp) });
				return pkgConf(namespace, newOpts);
			}

			return addFp(Object.assign({}, opts.defaults, pkg[namespace]), fp);
		});
	});
};

var sync = function sync(namespace, opts) {
	if (!namespace) {
		throw new TypeError('Expected a namespace');
	}

	opts = opts || {};

	var fp = findUp.sync('package.json', opts.cwd ? { cwd: opts.cwd } : {});

	if (!fp) {
		return addFp(Object.assign({}, opts.defaults), fp);
	}

	var pkg = loadJsonFile.sync(fp);

	if (opts.skipOnFalse && pkg[namespace] === false) {
		var newOpts = Object.assign({}, opts, { cwd: findNextCwd(fp) });
		return sync(namespace, newOpts);
	}

	return addFp(Object.assign({}, opts.defaults, pkg[namespace]), fp);
};

module.exports = pkgConf;
module.exports.filepath = filepath;
module.exports.sync = sync;