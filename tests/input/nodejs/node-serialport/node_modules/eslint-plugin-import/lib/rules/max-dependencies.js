'use strict';

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var _staticRequire = require('../core/staticRequire');

var _staticRequire2 = _interopRequireDefault(_staticRequire);

var _docsUrl = require('../docsUrl');

var _docsUrl2 = _interopRequireDefault(_docsUrl);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var DEFAULT_MAX = 10;

var countDependencies = function countDependencies(dependencies, lastNode, context) {
  var _ref = context.options[0] || { max: DEFAULT_MAX };

  var max = _ref.max;

  if (dependencies.size > max) {
    context.report(lastNode, "Maximum number of dependencies (" + max + ") exceeded.");
  }
};

module.exports = {
  meta: {
    docs: {
      url: (0, _docsUrl2.default)('max-dependencies')
    },

    schema: [{
      'type': 'object',
      'properties': {
        'max': { 'type': 'number' }
      },
      'additionalProperties': false
    }]
  },

  create: function create(context) {
    var dependencies = new Set(); // keep track of dependencies
    var lastNode = void 0; // keep track of the last node to report on

    return {
      ImportDeclaration: function ImportDeclaration(node) {
        dependencies.add(node.source.value);
        lastNode = node.source;
      },
      CallExpression: function CallExpression(node) {
        if ((0, _staticRequire2.default)(node)) {
          var _node$arguments = _slicedToArray(node.arguments, 1);

          var requirePath = _node$arguments[0];

          dependencies.add(requirePath.value);
          lastNode = node;
        }
      },


      'Program:exit': function ProgramExit() {
        countDependencies(dependencies, lastNode, context);
      }
    };
  }
};