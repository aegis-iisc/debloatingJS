/**
 * @author Toru Nagashima
 * @copyright 2016 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var checkPublish = require("../util/check-publish");
var getAllowModules = require("../util/get-allow-modules");
var getConvertPath = require("../util/get-convert-path");
var getDocsUrl = require("../util/get-docs-url");
var getRequireTargets = require("../util/get-require-targets");
var getResolvePaths = require("../util/get-resolve-paths");
var getTryExtensions = require("../util/get-try-extensions");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * The definition of this rule.
 *
 * @param {RuleContext} context - The rule context to check.
 * @returns {object} The definition of this rule.
 */
function create(context) {
    var filePath = context.getFilename();
    if (filePath === "<input>") {
        return {};
    }

    return {
        "Program:exit": function ProgramExit() {
            checkPublish(context, filePath, getRequireTargets(context));
        }
    };
}

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    create: create,
    meta: {
        docs: {
            description: "disallow `require()` expressions of private things",
            category: "Possible Errors",
            recommended: true,
            url: getDocsUrl("no-unpublished-require.md")
        },
        fixable: false,
        schema: [{
            type: "object",
            properties: {
                allowModules: getAllowModules.schema,
                convertPath: getConvertPath.schema,
                resolvePaths: getResolvePaths.schema,
                tryExtensions: getTryExtensions.schema
            },
            additionalProperties: false
        }]
    }
};