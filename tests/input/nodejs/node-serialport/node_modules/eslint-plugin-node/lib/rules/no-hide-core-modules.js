/**
 * @author Toru Nagashima
 * @copyright 2016 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 *
 * @deprecated since v4.2.0
 * This rule was based on an invalid assumption.
 * No meaning.
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var path = require("path");
var resolve = require("resolve");
var getDocsUrl = require("../util/get-docs-url");
var getPackageJson = require("../util/get-package-json");
var getRequireTargets = require("../util/get-require-targets");
var getImportExportTargets = require("../util/get-import-export-targets");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

var CORE_MODULES = new Set(["assert", "buffer", "child_process", "cluster", "console", "constants", "crypto", "dgram", "dns", /* "domain", */"events", "fs", "http", "https", "module", "net", "os", "path", /* "punycode", */"querystring", "readline", "repl", "stream", "string_decoder", "timers", "tls", "tty", "url", "util", "vm", "zlib"]);
var BACK_SLASH = /\\/g;

/**
 * Creates AST event handlers for no-hide-core-modules.
 *
 * @param {RuleContext} context - The rule context.
 * @returns {object} AST event handlers.
 */
function create(context) {
    if (context.getFilename() === "<input>") {
        return {};
    }
    var filePath = path.resolve(context.getFilename());
    var dirPath = path.dirname(filePath);
    var packageJson = getPackageJson(filePath);
    var deps = new Set([].concat(Object.keys(packageJson && packageJson.dependencies || {}), Object.keys(packageJson && packageJson.devDependencies || {})));
    var options = context.options[0] || {};
    var allow = options.allow || [];
    var ignoreDirectDependencies = Boolean(options.ignoreDirectDependencies);
    var ignoreIndirectDependencies = Boolean(options.ignoreIndirectDependencies);

    return {
        "Program:exit": function ProgramExit(node) {
            var targets = [].concat(getRequireTargets(context, true), getImportExportTargets(context, node, true)).filter(function (t) {
                return CORE_MODULES.has(t.moduleName);
            });

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = targets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var target = _step.value;

                    var name = target.moduleName;
                    var allowed = allow.indexOf(name) !== -1 || ignoreDirectDependencies && deps.has(name) || ignoreIndirectDependencies && !deps.has(name);

                    if (allowed) {
                        continue;
                    }

                    var resolved = resolve.sync(name, { basedir: dirPath });
                    var isCore = resolved === name;

                    if (isCore) {
                        continue;
                    }

                    context.report({
                        node: target.node,
                        loc: target.node.loc,
                        message: "Unexpected import of third-party module '{{name}}'.",
                        data: {
                            name: path.relative(dirPath, resolved).replace(BACK_SLASH, "/")
                        }
                    });
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    };
}

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    create: create,
    meta: {
        docs: {
            description: "disallow third-party modules which are hiding core modules",
            category: "Possible Errors",
            recommended: false,
            url: getDocsUrl("no-hide-core-modules.md")
        },
        deprecated: true,
        fixable: false,
        schema: [{
            type: "object",
            properties: {
                allow: {
                    type: "array",
                    items: { enum: Array.from(CORE_MODULES) },
                    additionalItems: false,
                    uniqueItems: true
                },
                ignoreDirectDependencies: { type: "boolean" },
                ignoreIndirectDependencies: { type: "boolean" }
            },
            additionalProperties: false
        }]
    }
};