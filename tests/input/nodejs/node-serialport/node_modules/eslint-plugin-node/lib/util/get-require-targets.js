/**
 * @author Toru Nagashima
 * @copyright 2016 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var path = require("path");
var resolve = require("resolve");
var getResolvePaths = require("./get-resolve-paths");
var getTryExtensions = require("./get-try-extensions");
var getValueIfString = require("./get-value-if-string");
var ImportTarget = require("./import-target");
var stripImportPathParams = require("./strip-import-path-params");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Checks whether or not a given node is a callee.
 *
 * @param {ASTNode} node - A node to check.
 * @returns {boolean} `true` if the node is a callee.
 */
function isCallee(node) {
    return node.parent.type === "CallExpression" && node.parent.callee === node;
}

/**
 * Gets references of "require".
 *
 * @param {escope.Scope} scope - The global scope.
 * @returns {escope.Reference[]} References of "require".
 */
function getReferencesOfRequire(scope) {
    var variable = scope.set.get("require");
    if (!variable) {
        // Not found.
        return [];
    }
    return variable.references;
}

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * Gets a list of `require()` targets.
 *
 * Core modules of Node.js (e.g. `fs`, `http`) are excluded.
 *
 * @param {RuleContext} context - The rule context.
 * @param {boolean} includeCore - The flag to include core modules.
 * @returns {ImportTarget[]} A list of found target's information.
 */
module.exports = function getRequireTargets(context, includeCore) {
    var retv = [];
    var basedir = path.dirname(path.resolve(context.getFilename()));
    var paths = getResolvePaths(context);
    var references = getReferencesOfRequire(context.getScope());
    var extensions = getTryExtensions(context);
    var options = { basedir: basedir, paths: paths, extensions: extensions };

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = references[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var reference = _step.value;

            var node = reference.identifier;

            // Skips if it's not a call of `require`.
            if (!isCallee(node)) {
                continue;
            }

            // Gets the target module.
            var targetNode = node.parent.arguments[0];
            var rawName = getValueIfString(targetNode);
            var name = rawName && stripImportPathParams(rawName);
            if (name && (includeCore || !resolve.isCore(name))) {
                retv.push(new ImportTarget(targetNode, name, options));
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return retv;
};