/**
 * @author Toru Nagashima
 * @copyright 2017 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var getAllowModules = require("./get-allow-modules");
var getPackageJson = require("./get-package-json");

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

/**
 * Checks whether or not each requirement target is published via package.json.
 *
 * It reads package.json and checks the target exists in `dependencies`.
 *
 * @param {RuleContext} context - A context to report.
 * @param {string} filePath - The current file path.
 * @param {ImportTarget[]} targets - A list of target information to check.
 * @returns {void}
 */
module.exports = function checkForExtraneous(context, filePath, targets) {
    var packageInfo = getPackageJson(filePath);
    if (!packageInfo) {
        return;
    }

    var allowed = new Set(getAllowModules(context));
    var dependencies = new Set([].concat(Object.keys(packageInfo.dependencies || {}), Object.keys(packageInfo.devDependencies || {}), Object.keys(packageInfo.peerDependencies || {}), Object.keys(packageInfo.optionalDependencies || {})));

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = targets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var target = _step.value;

            var extraneous = target.moduleName != null && target.filePath != null && !dependencies.has(target.moduleName) && !allowed.has(target.moduleName);

            if (extraneous) {
                context.report({
                    node: target.node,
                    loc: target.node.loc,
                    message: "\"{{moduleName}}\" is extraneous.",
                    data: target
                });
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
};