'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;

/**
 * Emit data every number of bytes
 * @extends Transform
 * @param {Object} options parser options object
 * @param {Number} options.length the number of bytes on each data event
 * @summary A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.
 * @example
const SerialPort = require('serialport')
const ByteLength = require('parser-byte-length')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new ByteLength({length: 8}))
parser.on('data', console.log) // will have 8 bytes per data event
 */

var ByteLengthParser = function (_Transform) {
  _inherits(ByteLengthParser, _Transform);

  function ByteLengthParser(options) {
    _classCallCheck(this, ByteLengthParser);

    var _this = _possibleConstructorReturn(this, (ByteLengthParser.__proto__ || Object.getPrototypeOf(ByteLengthParser)).call(this, options));

    options = options || {};

    if (typeof options.length !== 'number') {
      throw new TypeError('"length" is not a number');
    }

    if (options.length < 1) {
      throw new TypeError('"length" is not greater than 0');
    }

    _this.length = options.length;
    _this.position = 0;
    _this.buffer = Buffer.alloc(_this.length);
    return _this;
  }

  _createClass(ByteLengthParser, [{
    key: '_transform',
    value: function _transform(chunk, encoding, cb) {
      var cursor = 0;
      while (cursor < chunk.length) {
        this.buffer[this.position] = chunk[cursor];
        cursor++;
        this.position++;
        if (this.position === this.length) {
          this.push(this.buffer);
          this.buffer = Buffer.alloc(this.length);
          this.position = 0;
        }
      }
      cb();
    }
  }, {
    key: '_flush',
    value: function _flush(cb) {
      this.push(this.buffer.slice(0, this.position));
      this.buffer = Buffer.alloc(this.length);
      cb();
    }
  }]);

  return ByteLengthParser;
}(Transform);

module.exports = ByteLengthParser;