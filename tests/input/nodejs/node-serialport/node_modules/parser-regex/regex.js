'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Transform = require('stream').Transform;

/**
 * A transform stream that uses a regular expression to split the incoming text upon.
 *
 * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
 * @extends Transform
 * @example
const SerialPort = require('serialport')
const Regex = = require('parser-regex')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Regex({ regex: /[\r\n]+/ }))
parser.on('data', console.log)
 */

var RegexParser = function (_Transform) {
  _inherits(RegexParser, _Transform);

  function RegexParser(options) {
    _classCallCheck(this, RegexParser);

    var opts = Object.assign({
      encoding: 'utf8'
    }, options);

    if (opts.regex === undefined) {
      throw new TypeError('"options.regex" must be a regular expression pattern or object');
    }

    if (!(opts.regex instanceof RegExp)) {
      opts.regex = new RegExp(opts.regex);
    }

    var _this = _possibleConstructorReturn(this, (RegexParser.__proto__ || Object.getPrototypeOf(RegexParser)).call(this, opts));

    _this.regex = opts.regex;
    _this.data = '';
    return _this;
  }

  _createClass(RegexParser, [{
    key: '_transform',
    value: function _transform(chunk, encoding, cb) {
      var _this2 = this;

      var data = this.data + chunk;
      var parts = data.split(this.regex);
      this.data = parts.pop();

      parts.forEach(function (part) {
        _this2.push(part);
      });
      cb();
    }
  }, {
    key: '_flush',
    value: function _flush(cb) {
      this.push(this.data);
      this.data = '';
      cb();
    }
  }]);

  return RegexParser;
}(Transform);

module.exports = RegexParser;