/**
 * @fileoverview Rule to require sorting of variables within a single Variable Declaration block
 * @author Ilya Volodin
 */

"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        docs: {
            description: "require variables within the same declaration block to be sorted",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/sort-vars"
        },

        schema: [{
            type: "object",
            properties: {
                ignoreCase: {
                    type: "boolean"
                }
            },
            additionalProperties: false
        }],

        fixable: "code"
    },

    create: function create(context) {

        var configuration = context.options[0] || {},
            ignoreCase = configuration.ignoreCase || false,
            sourceCode = context.getSourceCode();

        return {
            VariableDeclaration: function VariableDeclaration(node) {
                var idDeclarations = node.declarations.filter(function (decl) {
                    return decl.id.type === "Identifier";
                });
                var getSortableName = ignoreCase ? function (decl) {
                    return decl.id.name.toLowerCase();
                } : function (decl) {
                    return decl.id.name;
                };
                var unfixable = idDeclarations.some(function (decl) {
                    return decl.init !== null && decl.init.type !== "Literal";
                });
                var fixed = false;

                idDeclarations.slice(1).reduce(function (memo, decl) {
                    var lastVariableName = getSortableName(memo),
                        currentVariableName = getSortableName(decl);

                    if (currentVariableName < lastVariableName) {
                        context.report({
                            node: decl,
                            message: "Variables within the same declaration block should be sorted alphabetically.",
                            fix: function fix(fixer) {
                                if (unfixable || fixed) {
                                    return null;
                                }
                                return fixer.replaceTextRange([idDeclarations[0].range[0], idDeclarations[idDeclarations.length - 1].range[1]], idDeclarations

                                // Clone the idDeclarations array to avoid mutating it
                                .slice()

                                // Sort the array into the desired order
                                .sort(function (declA, declB) {
                                    var aName = getSortableName(declA);
                                    var bName = getSortableName(declB);

                                    return aName > bName ? 1 : -1;
                                })

                                // Build a string out of the sorted list of identifier declarations and the text between the originals
                                .reduce(function (sourceText, identifier, index) {
                                    var textAfterIdentifier = index === idDeclarations.length - 1 ? "" : sourceCode.getText().slice(idDeclarations[index].range[1], idDeclarations[index + 1].range[0]);

                                    return sourceText + sourceCode.getText(identifier) + textAfterIdentifier;
                                }, ""));
                            }
                        });
                        fixed = true;
                        return memo;
                    }
                    return decl;
                }, idDeclarations[0]);
            }
        };
    }
};