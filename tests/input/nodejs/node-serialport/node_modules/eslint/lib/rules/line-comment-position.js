/**
 * @fileoverview Rule to enforce the position of line comments
 * @author Alberto Rodr√≠guez
 */
"use strict";

var astUtils = require("../ast-utils");

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {
        docs: {
            description: "enforce position of line comments",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/line-comment-position"
        },

        schema: [{
            oneOf: [{
                enum: ["above", "beside"]
            }, {
                type: "object",
                properties: {
                    position: {
                        enum: ["above", "beside"]
                    },
                    ignorePattern: {
                        type: "string"
                    },
                    applyDefaultPatterns: {
                        type: "boolean"
                    },
                    applyDefaultIgnorePatterns: {
                        type: "boolean"
                    }
                },
                additionalProperties: false
            }]
        }]
    },

    create: function create(context) {
        var options = context.options[0];

        var above = void 0,
            ignorePattern = void 0,
            applyDefaultIgnorePatterns = true;

        if (!options || typeof options === "string") {
            above = !options || options === "above";
        } else {
            above = options.position === "above";
            ignorePattern = options.ignorePattern;

            if (options.hasOwnProperty("applyDefaultIgnorePatterns")) {
                applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;
            } else {
                applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;
            }
        }

        var defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;
        var fallThroughRegExp = /^\s*falls?\s?through/;
        var customIgnoreRegExp = new RegExp(ignorePattern);
        var sourceCode = context.getSourceCode();

        //--------------------------------------------------------------------------
        // Public
        //--------------------------------------------------------------------------

        return {
            Program: function Program() {
                var comments = sourceCode.getAllComments();

                comments.filter(function (token) {
                    return token.type === "Line";
                }).forEach(function (node) {
                    if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {
                        return;
                    }

                    if (ignorePattern && customIgnoreRegExp.test(node.value)) {
                        return;
                    }

                    var previous = sourceCode.getTokenBefore(node, { includeComments: true });
                    var isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;

                    if (above) {
                        if (isOnSameLine) {
                            context.report({
                                node: node,
                                message: "Expected comment to be above code."
                            });
                        }
                    } else {
                        if (!isOnSameLine) {
                            context.report({
                                node: node,
                                message: "Expected comment to be beside code."
                            });
                        }
                    }
                });
            }
        };
    }
};