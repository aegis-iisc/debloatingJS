/**
 * @fileoverview Environments manager
 * @author Nicholas C. Zakas
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var envs = require("../../conf/environments");

//------------------------------------------------------------------------------
// Public Interface
//------------------------------------------------------------------------------

var Environments = function () {

    /**
     * create env context
     */
    function Environments() {
        _classCallCheck(this, Environments);

        this._environments = new Map();

        this.load();
    }

    /**
     * Loads the default environments.
     * @returns {void}
     * @private
     */


    _createClass(Environments, [{
        key: "load",
        value: function load() {
            var _this = this;

            Object.keys(envs).forEach(function (envName) {
                _this._environments.set(envName, envs[envName]);
            });
        }

        /**
         * Gets the environment with the given name.
         * @param {string} name The name of the environment to retrieve.
         * @returns {Object?} The environment object or null if not found.
         */

    }, {
        key: "get",
        value: function get(name) {
            return this._environments.get(name) || null;
        }

        /**
         * Gets all the environment present
         * @returns {Object} The environment object for each env name
         */

    }, {
        key: "getAll",
        value: function getAll() {
            return Array.from(this._environments).reduce(function (coll, env) {
                coll[env[0]] = env[1];
                return coll;
            }, {});
        }

        /**
         * Defines an environment.
         * @param {string} name The name of the environment.
         * @param {Object} env The environment settings.
         * @returns {void}
         */

    }, {
        key: "define",
        value: function define(name, env) {
            this._environments.set(name, env);
        }

        /**
         * Imports all environments from a plugin.
         * @param {Object} plugin The plugin object.
         * @param {string} pluginName The name of the plugin.
         * @returns {void}
         */

    }, {
        key: "importPlugin",
        value: function importPlugin(plugin, pluginName) {
            var _this2 = this;

            if (plugin.environments) {
                Object.keys(plugin.environments).forEach(function (envName) {
                    _this2.define(pluginName + "/" + envName, plugin.environments[envName]);
                });
            }
        }
    }]);

    return Environments;
}();

module.exports = Environments;