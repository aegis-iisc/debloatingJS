/**
 * @fileoverview Traverser to traverse AST trees.
 * @author Nicholas C. Zakas
 * @author Toru Nagashima
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var vk = require("eslint-visitor-keys");
var debug = require("debug")("eslint:traverser");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * Do nothing.
 * @returns {void}
 */
function noop() {}

// do nothing.


/**
 * Check whether the given value is an ASTNode or not.
 * @param {any} x The value to check.
 * @returns {boolean} `true` if the value is an ASTNode.
 */
function isNode(x) {
    return x !== null && (typeof x === "undefined" ? "undefined" : _typeof(x)) === "object" && typeof x.type === "string";
}

/**
 * Get the visitor keys of a given node.
 * @param {Object} visitorKeys The map of visitor keys.
 * @param {ASTNode} node The node to get their visitor keys.
 * @returns {string[]} The visitor keys of the node.
 */
function getVisitorKeys(visitorKeys, node) {
    var keys = visitorKeys[node.type];

    if (!keys) {
        keys = vk.getKeys(node);
        debug("Unknown node type \"%s\": Estimated visitor keys %j", node.type, keys);
    }

    return keys;
}

/**
 * The traverser class to traverse AST trees.
 */

var Traverser = function () {
    function Traverser() {
        _classCallCheck(this, Traverser);

        this._current = null;
        this._parents = [];
        this._skipped = false;
        this._broken = false;
        this._visitorKeys = null;
        this._enter = null;
        this._leave = null;
    }

    /**
     * @returns {ASTNode} The current node.
     */


    _createClass(Traverser, [{
        key: "current",
        value: function current() {
            return this._current;
        }

        /**
         * @returns {ASTNode[]} The ancestor nodes.
         */

    }, {
        key: "parents",
        value: function parents() {
            return this._parents.slice(0);
        }

        /**
         * Break the current traversal.
         * @returns {void}
         */

    }, {
        key: "break",
        value: function _break() {
            this._broken = true;
        }

        /**
         * Skip child nodes for the current traversal.
         * @returns {void}
         */

    }, {
        key: "skip",
        value: function skip() {
            this._skipped = true;
        }

        /**
         * Traverse the given AST tree.
         * @param {ASTNode} node The root node to traverse.
         * @param {Object} options The option object.
         * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.
         * @param {Function} [options.enter=noop] The callback function which is called on entering each node.
         * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.
         * @returns {void}
         */

    }, {
        key: "traverse",
        value: function traverse(node, options) {
            this._current = null;
            this._parents = [];
            this._skipped = false;
            this._broken = false;
            this._visitorKeys = options.visitorKeys || vk.KEYS;
            this._enter = options.enter || noop;
            this._leave = options.leave || noop;
            this._traverse(node, null);
        }

        /**
         * Traverse the given AST tree recursively.
         * @param {ASTNode} node The current node.
         * @param {ASTNode|null} parent The parent node.
         * @returns {void}
         * @private
         */

    }, {
        key: "_traverse",
        value: function _traverse(node, parent) {
            if (!isNode(node)) {
                return;
            }

            this._current = node;
            this._skipped = false;
            this._enter(node, parent);

            if (!this._skipped && !this._broken) {
                var keys = getVisitorKeys(this._visitorKeys, node);

                if (keys.length >= 1) {
                    this._parents.push(node);
                    for (var i = 0; i < keys.length && !this._broken; ++i) {
                        var child = node[keys[i]];

                        if (Array.isArray(child)) {
                            for (var j = 0; j < child.length && !this._broken; ++j) {
                                this._traverse(child[j], node);
                            }
                        } else {
                            this._traverse(child, node);
                        }
                    }
                    this._parents.pop();
                }
            }

            if (!this._broken) {
                this._leave(node, parent);
            }

            this._current = parent;
        }

        /**
         * Calculates the keys to use for traversal.
         * @param {ASTNode} node The node to read keys from.
         * @returns {string[]} An array of keys to visit on the node.
         * @private
         */

    }], [{
        key: "getKeys",
        value: function getKeys(node) {
            return vk.getKeys(node);
        }

        /**
         * Traverse the given AST tree.
         * @param {ASTNode} node The root node to traverse.
         * @param {Object} options The option object.
         * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.
         * @param {Function} [options.enter=noop] The callback function which is called on entering each node.
         * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.
         * @returns {void}
         */

    }, {
        key: "traverse",
        value: function traverse(node, options) {
            new Traverser().traverse(node, options);
        }

        /**
         * The default visitor keys.
         * @type {Object}
         */

    }, {
        key: "DEFAULT_VISITOR_KEYS",
        get: function get() {
            return vk.KEYS;
        }
    }]);

    return Traverser;
}();

module.exports = Traverser;