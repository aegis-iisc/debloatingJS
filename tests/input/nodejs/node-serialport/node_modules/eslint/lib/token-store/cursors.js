/**
 * @fileoverview Define 2 token factories; forward and backward.
 * @author Toru Nagashima
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BackwardTokenCommentCursor = require("./backward-token-comment-cursor");
var BackwardTokenCursor = require("./backward-token-cursor");
var FilterCursor = require("./filter-cursor");
var ForwardTokenCommentCursor = require("./forward-token-comment-cursor");
var ForwardTokenCursor = require("./forward-token-cursor");
var LimitCursor = require("./limit-cursor");
var SkipCursor = require("./skip-cursor");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

/**
 * The cursor factory.
 * @private
 */

var CursorFactory = function () {

    /**
     * Initializes this cursor.
     * @param {Function} TokenCursor - The class of the cursor which iterates tokens only.
     * @param {Function} TokenCommentCursor - The class of the cursor which iterates the mix of tokens and comments.
     */
    function CursorFactory(TokenCursor, TokenCommentCursor) {
        _classCallCheck(this, CursorFactory);

        this.TokenCursor = TokenCursor;
        this.TokenCommentCursor = TokenCommentCursor;
    }

    /**
     * Creates a base cursor instance that can be decorated by createCursor.
     *
     * @param {Token[]} tokens - The array of tokens.
     * @param {Comment[]} comments - The array of comments.
     * @param {Object} indexMap - The map from locations to indices in `tokens`.
     * @param {number} startLoc - The start location of the iteration range.
     * @param {number} endLoc - The end location of the iteration range.
     * @param {boolean} includeComments - The flag to iterate comments as well.
     * @returns {Cursor} The created base cursor.
     */


    _createClass(CursorFactory, [{
        key: "createBaseCursor",
        value: function createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments) {
            var Cursor = includeComments ? this.TokenCommentCursor : this.TokenCursor;

            return new Cursor(tokens, comments, indexMap, startLoc, endLoc);
        }

        /**
         * Creates a cursor that iterates tokens with normalized options.
         *
         * @param {Token[]} tokens - The array of tokens.
         * @param {Comment[]} comments - The array of comments.
         * @param {Object} indexMap - The map from locations to indices in `tokens`.
         * @param {number} startLoc - The start location of the iteration range.
         * @param {number} endLoc - The end location of the iteration range.
         * @param {boolean} includeComments - The flag to iterate comments as well.
         * @param {Function|null} filter - The predicate function to choose tokens.
         * @param {number} skip - The count of tokens the cursor skips.
         * @param {number} count - The maximum count of tokens the cursor iterates. Zero is no iteration for backward compatibility.
         * @returns {Cursor} The created cursor.
         */

    }, {
        key: "createCursor",
        value: function createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, count) {
            var cursor = this.createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments);

            if (filter) {
                cursor = new FilterCursor(cursor, filter);
            }
            if (skip >= 1) {
                cursor = new SkipCursor(cursor, skip);
            }
            if (count >= 0) {
                cursor = new LimitCursor(cursor, count);
            }

            return cursor;
        }
    }]);

    return CursorFactory;
}();

//------------------------------------------------------------------------------
// Exports
//------------------------------------------------------------------------------

exports.forward = new CursorFactory(ForwardTokenCursor, ForwardTokenCommentCursor);
exports.backward = new CursorFactory(BackwardTokenCursor, BackwardTokenCommentCursor);