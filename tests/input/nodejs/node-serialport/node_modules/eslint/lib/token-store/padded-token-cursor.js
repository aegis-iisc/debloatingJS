/**
 * @fileoverview Define the cursor which iterates tokens only, with inflated range.
 * @author Toru Nagashima
 */
"use strict";

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ForwardTokenCursor = require("./forward-token-cursor");

//------------------------------------------------------------------------------
// Exports
//------------------------------------------------------------------------------

/**
 * The cursor which iterates tokens only, with inflated range.
 * This is for the backward compatibility of padding options.
 */
module.exports = function (_ForwardTokenCursor) {
  _inherits(PaddedTokenCursor, _ForwardTokenCursor);

  /**
   * Initializes this cursor.
   * @param {Token[]} tokens - The array of tokens.
   * @param {Comment[]} comments - The array of comments.
   * @param {Object} indexMap - The map from locations to indices in `tokens`.
   * @param {number} startLoc - The start location of the iteration range.
   * @param {number} endLoc - The end location of the iteration range.
   * @param {number} beforeCount - The number of tokens this cursor iterates before start.
   * @param {number} afterCount - The number of tokens this cursor iterates after end.
   */
  function PaddedTokenCursor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {
    _classCallCheck(this, PaddedTokenCursor);

    var _this = _possibleConstructorReturn(this, (PaddedTokenCursor.__proto__ || Object.getPrototypeOf(PaddedTokenCursor)).call(this, tokens, comments, indexMap, startLoc, endLoc));

    _this.index = Math.max(0, _this.index - beforeCount);
    _this.indexEnd = Math.min(tokens.length - 1, _this.indexEnd + afterCount);
    return _this;
  }

  return PaddedTokenCursor;
}(ForwardTokenCursor);