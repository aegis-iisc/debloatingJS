'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Buffer = require('safe-buffer').Buffer;
var DelimiterParser = require('parser-delimiter');

/**
 *  A transform stream that emits data after a newline delimiter is received.
 * @summary To use the `Readline` parser, provide a delimiter (defaults to `\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
 * @extends DelimiterParser
 * @example
const SerialPort = require('serialport')
const Readline = = require('parser-readline')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Readline({ delimiter: '\r\n' }))
parser.on('data', console.log)
*/

var ReadLineParser = function (_DelimiterParser) {
  _inherits(ReadLineParser, _DelimiterParser);

  function ReadLineParser(options) {
    _classCallCheck(this, ReadLineParser);

    var opts = Object.assign({
      delimiter: Buffer.from('\n', 'utf8'),
      encoding: 'utf8'
    }, options);

    if (typeof opts.delimiter === 'string') {
      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);
    }

    return _possibleConstructorReturn(this, (ReadLineParser.__proto__ || Object.getPrototypeOf(ReadLineParser)).call(this, opts));
  }

  return ReadLineParser;
}(DelimiterParser);

module.exports = ReadLineParser;