
var assert = require('assert');
const commons = require("../commons.js");


function runTests (testName, isNode) {

    it('run jalangi', function () {
        var exitCode = commons.jalangiAnalysis('CheckModuleLoading', testName);
        assert.equal(exitCode, 0);
    });

    // compare actual and expected JSON files generated by the dynamic analysis phase
    it('detect loaded functions', function () {
        commons.compareLoadedWithExpected(testName, false);
    });

    it('detect unexercised functions', function () {
        commons.compareStubWithExpected(testName, false);
    });

    it('run instrumented app', function () {
        var modifiedTestName = commons.getModifiedPathOrDir(testName, isNode);
        var exitCode = commons.runWithNode(modifiedTestName, []);
        assert.equal(exitCode, 0);
    });

    it('compare standard output and error', function (done) {

        //
        done();
    });




    // TODO compare actual output
    it('check-out-by-executing-transformed-application', function (){
        var modifiedTestName = commons.getModifiedPathOrDir(testName, isNode);
        var stdout = commons.runWithNode(modifiedTestName, [], 'stdout');
        console.log("OUT "+stdout);
    });

    // TODO compare actual errors
    it('check-error-by-executing-transformed-application', function (){
        var modifiedTestName = commons.getModifiedPathOrDir(testName, isNode);
        var stderr = commons.runWithNode(modifiedTestName, [], 'stderr');
        console.log("ERROR "+stderr);
        //assert(exit === 0);

    });


}


describe('unit-tests', function () {
    describe('single-function-not-executed', function () {
        runTests('test1');
    });

    describe('single-function-executed', function () {
        runTests('test3');
    });

    describe('two-functions-one-executed', function () {
        runTests('test4');
    });

    describe('function-expression', function() {
        runTests('function-expression-2');
    });

    describe('function-expression-invoked', function() {
        runTests('function-expression-2-invoked');
    });

    describe('function-expression-as-argument', function() {
        runTests('function-expression-as-argument');
    });

    describe('function-expression-if-block', function() {
        runTests('function-expression-if-block');
    });

    describe('function-expression-object-property', function() {
        runTests('function-expression-object-property');
    });

    describe('shorthand-method-definition', function() {
        runTests('function-expression-object-property');
    });

    // different ways of function declaration
    //Function declaration

    //Function expression

    // Function expression as an argument to other function
    // + function-expression-as-argument.js
    // Function expression inside ()
    // + function-expression-2.js
    // Function expression inside an external block of code , e.g. a function expression in a if...else... branch
    //+ function-expression-if-block.js
    //Function expression as an object property value
    // + function-expression-object-property.js

    //Shorthand method definition
    // function definition in a class (only in ES6)
    // + function-expression-class.js

    //Arrow function
    // arrow function definition
    // + function-arrow-function.js
    // arrow function in a class
    // + function-arrow-function-class.js

    //Generator function
    // generator function definition
    // + function-generator-function.js
    // + function-generator-function-2.js

    //Function constructor

    // new Function
    //+ function-new-function.js

    // Recursive function calls
});
