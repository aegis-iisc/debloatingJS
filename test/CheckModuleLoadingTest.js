
var assert = require('assert');
const commons = require("../commons.js");


function runTests (testName, isNode) {

    it('check-exit-jalangi-execution', function () {

        var exit = commons.jalangiAnalysis('CheckModuleLoading', testName);
        assert(exit === 0);
    });

    it('check-size-loaded-functions', function () {
        var size = commons. verifyGeneratedLoaded(testName, false);
        console.log("size "+size);
        assert(size !== 0); // TODO compare contents of two files
    });


    it('check-size-stubList', function () {
        // pass the fileName and a boolean stat
        var size = commons.verifyGeneratedStubList(testName, false);
        console.log("size "+size);
        assert(size !== 0); // TODO compare contents of two files
    });

    // TODO merge the next two tests
    it('check-exit-code-Main-run-unit', function () {
        if(!isNode) {
            var exit = commons.runWithNode('./analysis/src/Main.js', ['--analysis CheckModuleLoading.js', '--inputFile ' + testName + '.js', '--transformer S2STransformer.js ']);
            assert(exit === 0);
        }else{// node csae to be handled later
            assert(true);
        }
    });
    //TODO Merge it with the Main-run-unit test
    /*it('check-exit-code-Main-run-dir', function () {
        if(!isNode) {
            var exit = commons.runWithNode('./analysis/src/Main.js', ['--analysis CheckModuleLoading.js', '--inputDir ' + testName + '.js', '--transformer S2STransformer.js']);
            assert(exit === 0);
        }else{
            assert(true);
        }

    });
*/
    // compare actual and exptected JSON files generated by the dynamic analysis phase-
    it('check-loaded-json', function () {
        return commons.compareLoadedWithExpected(testName, false);
        //assert(verified);
    });

    it('check-invoked-json', function () {
        return commons.compareExecutedWithExpected(testName, false);
        //assert(verified);
    });

    it('check-stublist-json', function () {
        var verified = commons.compareStubWithExpected(testName, false);
        assert(verified);
    });

    // TODO Independent check, can be removed now as subsumed by the above cases
    it('check-invoked-json-Main', function () {
        if(!isNode) {
            var exit = commons.runWithNode('./analysis/src/Main.js', ['--analysis CheckModuleLoading.js', '--inputFile ' + testName + '.js', '--transformer S2STransformer.js']);
            assert(exit === 0);
        }else{
            assert(true);
        }

    });


    // Checks over the transformed Application
    it('check-exit-by-executing-transformed-application', function (){

        var modifiedTestName = commons.getModifiedPathOrDir(testName, isNode);
        var exit = commons.runWithNode(modifiedTestName, []);
        assert(exit === 0);
    });


    // TODO compare actual output
    it('check-out-by-executing-transformed-application', function (){
        var modifiedTestName = commons.getModifiedPathOrDir(testName, isNode);
        var stdout = commons.runWithNode(modifiedTestName, [], 'stdout');
        console.log("OUT "+stdout);
    });

    // TODO compare actual errors
    it('check-error-by-executing-transformed-application', function (){
        var modifiedTestName = commons.getModifiedPathOrDir(testName, isNode);
        var stderr = commons.runWithNode(modifiedTestName, [], 'stderr');
        console.log("ERROR "+stderr);
        //assert(exit === 0);

    });


   }


describe('unit-tests', function () {
    describe('single-function-not-executed', function () {
        runTests('test1');
    });
    describe('single-function-executed', function () {
        runTests('test3');
    });
    describe('two-functions-one-executed', function () {
        runTests('test4');
    });
    describe('function-expression', function() {

       runTests('function-expression-2');
    });

    describe('function-expression-invoked', function() {

        runTests('function-expression-2-invoked');
    });
    describe('function-expression-as-argument', function() {

        runTests('function-expression-as-argument');
    });
    describe('function-expression-if-block', function() {

        runTests('function-expression-if-block');
    });
    describe('function-expression-object-property', function() {

        runTests('function-expression-object-property');
    });

    describe('shorthand-method-definition', function() {

        runTests('function-expression-object-property');
    });
    

    // different ways of function declaration
    //Function declaration

    //Function expression

        // Function expression as an argument to other function
                // + function-expression-as-argument.js
        // Function expression inside ()
                    // + function-expression-2.js
        // Function expression inside an external block of code , e.g. a function expression in a if...else... branch
                //+ function-expression-if-block.js
        //Function expression as an object property value
            // + function-expression-object-property.js





    //Shorthand method definition
        // function definition in a class (only in ES6)
            // + function-expression-class.js

    //Arrow function
      // arrow function definition
        // + function-arrow-function.js
    // arrow function in a class
        // + function-arrow-function-class.js



    //Generator function
    // generator function definition
    // + function-generator-function.js
    // + function-generator-function-2.js



    //Function constructor

    // new Function
    //+ function-new-function.js


    // Recursive function calls


});



/*
describe('unit-tests', function () {
    describe('test1', function () {
        runTests('test1');
    });
    describe('test2', function () {
        runTests('test2');
    });
});






describe('simplest', function() {
  describe('successful execution of module', function() {
    it('should run with exit 0', function() {
      // the command for running the test case goes here
      commons.runTest("abc");

    });
  });
});
// checks correct jalangi -execution
describe('CheckModuleLoading', function() {
    it('should run with exit 0', function() {
        // the command for running the test case goes here
        //var inputFile
        commons.runNode('./tests/test-loading-semantics.js');
    });
});
// checks size of the stubList generated
describe('CheckModuleLoading', function () {
    it('size of stubList.json must be greater than 0', function () {
        var length = commons.runJalangi('CheckModuleLoading', 'test-loading-semantics.js');
        if(length !== -1)
            assert(length > 0, 'Either Stub generation failed or No uncovered function');
        else
            assert(length === 0, 'Jalangi Execution Failed');
    });
});


// Add Test case for running Jalangi over an application and a set of testcases



describe('S2STransformer', function () {
    it('S2STransformer executes successfully', function () {
        commons.runTransformer('./analysis/S2STransformer.js', 'stubList.json', './tests', './tests/output-actual/unit/');

    });
});

// test running the generated code
describe('IN : exported_circle_second_modified', function () {
    it('modified function successfully executes', function () {
        try{
            commons.runWithNode('./scribble/tests/exported_circle_second_modified.js', []);
            assert(true);
        }catch (e){
            console.log(e.message);
            assert(false);
        }
    });
});

describe('test-loading-semantics', function () {
    it('generated code successfully executes, no call to removed function', function () {
        try{
            var exit = commons.runWithNode('./tests/test-loading-semantics.js', []);
            assert(exit === 0);
        }catch (e){
            console.log(e.message);
            assert(false);
        }
    });
});

describe('test-loading-semantics_modified Scribble', function () {
   it('generated code should successfully executes, call to a dynamically loaded function', function () {
       try{
        var exit = commons.runWithNode('./scribble/tests/test-loading-semantics_modified.js', []);
        assert(exit === 0);
       }catch (e){
           console.log(e.message);
           assert(false);
       }
   });
});


// Individual Test for updating require statements.
describe('IN : createupdatedrequire', function () {
    it('output js file should update the required modules to the modified version', function () {
         var exit =commons.runWithNode('./scribble/createupdatedrequire.js', []);
         assert(exit === 0);

    });
});



describe('Main1', function () {
    it('run whole debloater over a unit test in /tests/input/file.js', function () {
        var exit = commons.runWithNode('./analysis/src/Main.js', ['--analysis CheckModuleLoading.js', '--inputFile test-loading-semantics.js', '--transformer S2STransformer.js ']);
        assert(exit === 0);

    });
});



describe('Main2', function () {
    it('run whole debloater over a directory structure in /tests/input/unit', function () {
        var exit = commons.runWithNode('./analysis/src/Main.js', ['--analysis CheckModuleLoading.js', '--inputDir test2', '--transformer S2STransformer.js']);
        assert(exit === 0);

    });
});


describe('Main2.1', function () {
    it('run whole debloater over a directory structure in /tests/input/unit checks the correct directory structure formation', function () {
        var exit = commons.runWithNode('./analysis/src/Main.js', ['--analysis CheckModuleLoading.js', '--inputDir test2', '--transformer S2STransformer.js']);
        assert(exit === 0);

    });
});

describe('Main3', function () {
    it('run whole debloater over a nodejs app in /tests/input/nodejs', function () {
        var exit = commons.runWithNode('./analysis/src/Main.js', ['--analysis CheckModuleLoading.js', '--inputFile test-loading-semantics.js', '--transformer S2STransformer.js', '--node true']);
        assert(exit === 0);

    });
});


// compare simple textual difference
describe('require parameters update', function () {
    it('output js file should update the required modules to the modified version', function () {
        var exit = commons.runTextDiff('./tests/output-actual/unit/exported_circle_second_modified.js', './tests/output-expected/unit/exported_circle_second_modified.js');
        assert(exit === 0);

    });
});


*/



// what are the artifacts
// test case for jalangi create current and expected outputs and assert for their equality.
// use the exit code from the shelljs to check for successful execution.

//